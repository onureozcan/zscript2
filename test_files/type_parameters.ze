var generic_fnc = fun<T:Any> (arg:T) : T {
    var ret: T = arg
    return arg
}

var int_test: int = generic_fnc(3)
var string_test: String = generic_fnc("test")

print(int_test)
print(string_test)

var second_order_generic_fnc = fun<T> (arg:T) : fun<String,T> {

    return fun(str: String): T {
        print("I am a generic function generated by a high order generic function.
            you give me a string : `" + str + "` and i give you an object of type T!")
        var result: T = arg
        return result
    }
}

var generated_fnc_decimal = second_order_generic_fnc(3.14)
var generated_fnc_string = second_order_generic_fnc("osman")
var generated_fnc_int = second_order_generic_fnc(-5)

print(generated_fnc_decimal("test - decimal"))
print(generated_fnc_string("test - string"))
print(generated_fnc_int("test - int"))