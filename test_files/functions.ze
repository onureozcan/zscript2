var some_outer_fnc = fun () {
    print("hello from the outer fnc")

    var inner_fnc_in_outer_fnc = fun () {
        print("i am the inner fnc that is placed inside the outer fnc");
        print("here is the tricky part:
        I am not directly called by `some_outer_fnc` but through `main`.
        so, if you see this, it shows that I knew where I need to search for parent variables. yeey :) ")
    }

    inner_fnc_in_outer_fnc()
}

var fun_returning_str = fun():String {
    return "i can return values, how cool is not it? :D";
}

var fun_returning_fun = fun(message: String):fun<String> {
    return fun (): String {
        return "look ma, i can return functions too: " + message
    };
}

var fun_with_args = fun (a:String, b:String): String {
    return a + b
}

var fun_takes_fun_as_arg = fun (fn:fun<String>) : String {
    print("hey, nice function, i will call it now!")
    return fn()
}

var main = fun() {

	print("i am the main fnc")
	print("now i am calling a function defined outside of me!")
	some_outer_fnc()
	print("now let's call a function that returns a value")
	print(fun_returning_str())
	print("now let me call a function and pass arguments to it")
	print(fun_with_args("arg1","arg2"))
	print("now i will call a function, generating a function based on the parameter i have passed")
	print(fun_returning_fun("some arg 1")());
	print(fun_returning_fun("some arg 2")());
    print(fun_returning_fun("some arg 3")());

    var something = "something"
    print(fun_takes_fun_as_arg(fun(): String {
        return "hello from the function that was passed to another function as a callback! " +
        "and here is a variable from my parent context:" + something
    }))
}

main()

